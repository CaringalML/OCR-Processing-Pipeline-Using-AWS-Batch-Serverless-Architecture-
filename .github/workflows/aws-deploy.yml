name: Unit Tests and Validation Pipeline

on:
  push:
    branches: [ v4-python ]
  pull_request:
    branches: [ v4-python ]
  workflow_dispatch:

jobs:
  validate-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    # === VALIDATION TESTS ===
    - name: Validate Python Syntax
      run: |
        echo "üîç Validating Python syntax..."
        python -m py_compile aws_batch/index.py
        echo "‚úÖ Python syntax validation passed"

    - name: Check Python Dependencies
      run: |
        echo "üîç Validating requirements.txt..."
        pip install --dry-run -r aws_batch/requirements.txt
        echo "‚úÖ Dependencies validation passed"

    - name: Validate Dockerfile Syntax
      run: |
        echo "üîç Validating Dockerfile..."
        docker build --no-cache -t test-validation ./aws_batch
        echo "‚úÖ Dockerfile build validation passed"

    - name: Test Container Functionality
      run: |
        echo "üîç Testing container functionality..."
        docker run --rm -e S3_BUCKET=test -e S3_KEY=test -e FILE_ID=test -e DYNAMODB_TABLE=test test-validation python -c "
        import sys
        print('Testing imports...')
        try:
            import boto3
            import regex
            print('‚úÖ Core AWS libraries imported successfully')
        except ImportError as e:
            print(f'‚ùå Core import failed: {e}')
            sys.exit(1)
        
        try:
            # Test enhanced libraries with graceful fallback
            import ftfy
            print('‚úÖ Enhanced libraries available')
        except ImportError:
            print('‚ö†Ô∏è  Enhanced libraries not available (fallback mode)')
        
        print('‚úÖ Container functionality test passed')
        "

    - name: Validate Environment Configuration
      run: |
        echo "üîç Validating environment configuration..."
        if [ ! -f "aws_batch/.env.example" ]; then
          echo "‚ùå Missing .env.example file"
          exit 1
        fi
        echo "‚úÖ Environment configuration validated"

    - name: Check Code Quality
      run: |
        echo "üîç Running code quality checks..."
        python -c "
        import ast
        import sys
        
        print('Checking index.py structure...')
        with open('aws_batch/index.py', 'r') as f:
            content = f.read()
        
        try:
            ast.parse(content)
            print('‚úÖ AST parsing successful')
        except SyntaxError as e:
            print(f'‚ùå Syntax error: {e}')
            sys.exit(1)
        
        # Check for required functions
        required_functions = ['main', 'process_s3_file', 'apply_comprehensive_grammar_rules']
        for func in required_functions:
            if f'def {func}' in content:
                print(f'‚úÖ Function {func} found')
            else:
                print(f'‚ùå Function {func} missing')
                sys.exit(1)
        
        print('‚úÖ Code quality checks passed')
        "

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.7

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: |
        echo "üîç Validating Terraform configuration..."
        terraform validate
        echo "‚úÖ Terraform validation passed"

    - name: Terraform Format Check
      run: |
        echo "üîç Checking Terraform formatting..."
        terraform fmt -check -diff
        echo "‚úÖ Terraform formatting validated"

    # === SECURITY VALIDATION ===
    - name: Security Scan - Check for Secrets
      run: |
        echo "üîç Scanning for potential secrets..."
        
        # Exclude common false positives from AWS SDK and libraries
        # Look for actual secret values, not just parameter names
        if grep -r -E "(aws_access_key|aws_secret|password|token)\s*=\s*[\"'][A-Za-z0-9+/]{20,}[\"']" \
          --include="*.py" \
          --include="*.tf" \
          --include="*.yml" \
          --exclude-dir=".github" \
          --exclude-dir="lambda_functions/document_search/botocore" \
          --exclude-dir="lambda_functions/document_search/rapidfuzz" \
          --exclude-dir="node_modules" \
          --exclude-dir="venv" \
          --exclude-dir=".venv" \
          . | grep -v "example" | grep -v "test" | grep -v "dummy"; then
          echo "‚ùå Potential secrets found in code"
          exit 1
        fi
        
        # Also check for AWS credential patterns (AKIA*, base64 strings, etc)
        if grep -r -E "AKIA[0-9A-Z]{16}|([A-Za-z0-9+/]{40})" \
          --include="*.py" \
          --include="*.tf" \
          --include="*.yml" \
          --exclude-dir=".github" \
          --exclude-dir="lambda_functions/document_search/botocore" \
          --exclude-dir="lambda_functions/document_search/rapidfuzz" \
          --exclude-dir="node_modules" \
          --exclude-dir="venv" \
          . | grep -v "example" | grep -v "test"; then
          echo "‚ö†Ô∏è  Warning: Found potential AWS access keys or secret patterns"
          # You might want to manually review these
        fi
        
        echo "‚úÖ Security scan passed - no hardcoded secrets"

    - name: Validate AWS Resource Configuration
      run: |
        echo "üîç Validating AWS resource configuration..."
        python -c "
        import json
        import sys
        
        # Check if required environment variables are templated
        required_vars = ['S3_BUCKET', 'S3_KEY', 'FILE_ID', 'DYNAMODB_TABLE']
        
        with open('aws_batch/index.py', 'r') as f:
            content = f.read()
        
        for var in required_vars:
            if f\"os.getenv('{var}')\" in content:
                print(f'‚úÖ Environment variable {var} properly configured')
            else:
                print(f'‚ùå Environment variable {var} missing')
                sys.exit(1)
        
        print('‚úÖ AWS resource configuration validated')
        "

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and Push Docker Image to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: latest
      run: |
        echo "üîç Building production Docker image..."
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./aws_batch
        echo "‚úÖ Docker image built successfully"
        
        echo "üöÄ Pushing Docker image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "‚úÖ Docker image pushed to ECR successfully"

    - name: Test Production Image in ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: latest
      run: |
        echo "üîç Testing production image from ECR..."
        docker run --rm -e S3_BUCKET=test -e S3_KEY=test -e FILE_ID=test -e DYNAMODB_TABLE=test \
          $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG python -c "
        print('üß™ Production ECR image test started')
        
        # Test core functionality
        try:
            import sys, os
            
            # Test imports
            import boto3
            import regex
            print('‚úÖ Core AWS dependencies working')
            
            # Test enhanced features availability
            try:
                sys.path.insert(0, '/app')
                import index
                if hasattr(index, 'apply_comprehensive_grammar_rules'):
                    print('‚úÖ Enhanced grammar system available')
                else:
                    print('‚ö†Ô∏è Enhanced features fallback mode')
            except ImportError:
                print('‚ö†Ô∏è Enhanced features fallback mode')
            
            print('‚úÖ Production ECR image test passed')
            
        except Exception as e:
            print(f'‚ùå Production ECR image test failed: {e}')
            sys.exit(1)
        "

    # === DEPLOYMENT SUMMARY ===
    - name: Deployment Summary
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      run: |
        echo "üéâ All tests passed and Docker image deployed to ECR!"
        echo ""
        echo "‚úÖ Unit Tests Completed:"
        echo "  ‚Ä¢ Python syntax validation"
        echo "  ‚Ä¢ Dependencies validation" 
        echo "  ‚Ä¢ Dockerfile build test"
        echo "  ‚Ä¢ Container functionality test"
        echo "  ‚Ä¢ Environment configuration validation"
        echo "  ‚Ä¢ Code quality checks"
        echo "  ‚Ä¢ Security scan"
        echo "  ‚Ä¢ AWS resource configuration"
        echo "  ‚Ä¢ Terraform syntax validation"
        echo ""
        echo "‚úÖ Docker Image Deployed:"
        echo "  ‚Ä¢ Registry: $ECR_REGISTRY"
        echo "  ‚Ä¢ Repository: $ECR_REPOSITORY"
        echo "  ‚Ä¢ Tag: latest"
        echo "  ‚Ä¢ Production tested and verified"
        echo ""
        echo "üöÄ Ready for manual infrastructure deployment:"
        echo "  1. Run locally: terraform plan"
        echo "  2. Review the plan output"
        echo "  3. Run: terraform apply"
        echo "  4. Docker image is available in ECR with 'latest' tag"